// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Data;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    [Migration("20231007092440_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has18Holes")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e26618f1-b424-4ddb-b9b7-56146d4d1963"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol",
                            Has18Holes = false,
                            Length = 5000,
                            Par = 0
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ccbe7866-f87d-416d-9005-2c83f692c168"),
                            CourseId = new Guid("e26618f1-b424-4ddb-b9b7-56146d4d1963"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("698f4e72-58e6-49a8-8f61-1d99fa9e87ff"),
                            CourseId = new Guid("e26618f1-b424-4ddb-b9b7-56146d4d1963"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("a2198e2b-e8ca-4fd7-ab17-ef53372929c1"),
                            CourseId = new Guid("e26618f1-b424-4ddb-b9b7-56146d4d1963"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("d6a0d440-91bf-4c9d-8fe9-1a6b7253d364"),
                            CourseId = new Guid("e26618f1-b424-4ddb-b9b7-56146d4d1963"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("0f225cdb-ea6c-4c8b-a9e8-7f0142d77852"),
                            CourseId = new Guid("e26618f1-b424-4ddb-b9b7-56146d4d1963"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("fb032fb2-00bc-4530-96a6-16fa60735e3e"),
                            CourseId = new Guid("e26618f1-b424-4ddb-b9b7-56146d4d1963"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("f86fdc20-765c-4322-944d-d82c922a5117"),
                            CourseId = new Guid("e26618f1-b424-4ddb-b9b7-56146d4d1963"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("9aa21e91-9c93-4814-9e14-33844a56b8d2"),
                            CourseId = new Guid("e26618f1-b424-4ddb-b9b7-56146d4d1963"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("3f116610-5582-4134-a2a5-8a8415bb2ba3"),
                            CourseId = new Guid("e26618f1-b424-4ddb-b9b7-56146d4d1963"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98b515ab-6b79-450d-88aa-3581a16119f0"),
                            CourseId = new Guid("e26618f1-b424-4ddb-b9b7-56146d4d1963"),
                            TeeBox = 52
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("6428fe4e-a06b-44ee-a453-af63ba43f7ba"),
                            CourseId = new Guid("e26618f1-b424-4ddb-b9b7-56146d4d1963"),
                            Puts = 18,
                            Strokes = 45,
                            UserId = new Guid("c8ea1db6-ff62-4d10-9b31-85a0b4907725")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a05107f0-559e-468c-aa07-84b1d9c97191"),
                            HoleNumber = 1,
                            Puts = 2,
                            RoundId = new Guid("6428fe4e-a06b-44ee-a453-af63ba43f7ba"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("fde41c1c-14bf-4acc-aa5e-1948e90ce733"),
                            HoleNumber = 2,
                            Puts = 2,
                            RoundId = new Guid("6428fe4e-a06b-44ee-a453-af63ba43f7ba"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("34acdb17-6597-4dff-9a9e-2ef621558f01"),
                            HoleNumber = 3,
                            Puts = 2,
                            RoundId = new Guid("6428fe4e-a06b-44ee-a453-af63ba43f7ba"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("72ed27ca-f7ac-4185-af42-dba88c9b7c32"),
                            HoleNumber = 4,
                            Puts = 2,
                            RoundId = new Guid("6428fe4e-a06b-44ee-a453-af63ba43f7ba"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("880eb72d-d831-46d8-9f0f-a16f5d2d6894"),
                            HoleNumber = 5,
                            Puts = 1,
                            RoundId = new Guid("6428fe4e-a06b-44ee-a453-af63ba43f7ba"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("b96f693e-7be9-4931-9dba-864bd50e1e1e"),
                            HoleNumber = 6,
                            Puts = 2,
                            RoundId = new Guid("6428fe4e-a06b-44ee-a453-af63ba43f7ba"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("6a5605b7-0743-4bf8-8b1a-f81ee20db643"),
                            HoleNumber = 7,
                            Puts = 2,
                            RoundId = new Guid("6428fe4e-a06b-44ee-a453-af63ba43f7ba"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("029374f8-9a73-4f0e-abb5-2011f9aa65da"),
                            HoleNumber = 8,
                            Puts = 2,
                            RoundId = new Guid("6428fe4e-a06b-44ee-a453-af63ba43f7ba"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("1aa749b4-92ce-4525-b560-ce8dc5f0fde6"),
                            HoleNumber = 9,
                            Puts = 3,
                            RoundId = new Guid("6428fe4e-a06b-44ee-a453-af63ba43f7ba"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
