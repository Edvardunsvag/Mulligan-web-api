// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Database;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    [Migration("20231220001120_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has18Holes")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39a40625-cd21-412a-af80-ce1f27ada556"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol golfklubb",
                            Has18Holes = false,
                            Length = 2606,
                            Par = 36
                        },
                        new
                        {
                            Id = new Guid("845211e2-8208-47b1-a1e9-5a8649f39efb"),
                            CourseDescription = "Grønmo golfklubb description",
                            CourseName = "Grønmo golfklubb",
                            Has18Holes = false,
                            Length = 2870,
                            Par = 37
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("14404935-880c-4190-a1bc-750ea15d5ec1"),
                            CourseId = new Guid("39a40625-cd21-412a-af80-ce1f27ada556"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("8fe6e234-1028-4005-ba9f-45559247124c"),
                            CourseId = new Guid("39a40625-cd21-412a-af80-ce1f27ada556"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("068c6c66-60f4-49ed-841f-5fdce7a1cbf3"),
                            CourseId = new Guid("39a40625-cd21-412a-af80-ce1f27ada556"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("98ec7727-a3ba-42bf-addd-2e512c7c9d9e"),
                            CourseId = new Guid("39a40625-cd21-412a-af80-ce1f27ada556"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("876501c9-6559-47c2-9241-a58df31b761a"),
                            CourseId = new Guid("39a40625-cd21-412a-af80-ce1f27ada556"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("dc817ec2-a15d-4430-a3bb-f360955061bf"),
                            CourseId = new Guid("39a40625-cd21-412a-af80-ce1f27ada556"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("3ade4e0f-0e39-46f9-ab87-8f8265da4cd5"),
                            CourseId = new Guid("39a40625-cd21-412a-af80-ce1f27ada556"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("f0ec2809-d679-47c9-a6df-3fe23443969f"),
                            CourseId = new Guid("39a40625-cd21-412a-af80-ce1f27ada556"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("37151234-97ed-433a-a383-55ac19eb38f6"),
                            CourseId = new Guid("39a40625-cd21-412a-af80-ce1f27ada556"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("b4358b2f-1d22-4a3d-854d-dd520b480358"),
                            CourseId = new Guid("845211e2-8208-47b1-a1e9-5a8649f39efb"),
                            HoleNumber = 1,
                            Length = 494,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("dc9d48b5-3090-413d-aea6-f15bb74c0eb1"),
                            CourseId = new Guid("845211e2-8208-47b1-a1e9-5a8649f39efb"),
                            HoleNumber = 2,
                            Length = 266,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("32cdac80-7169-428d-a022-13c7324fc127"),
                            CourseId = new Guid("845211e2-8208-47b1-a1e9-5a8649f39efb"),
                            HoleNumber = 3,
                            Length = 361,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("693b9a00-33e7-4f74-93ec-3a3af09acfc0"),
                            CourseId = new Guid("845211e2-8208-47b1-a1e9-5a8649f39efb"),
                            HoleNumber = 4,
                            Length = 367,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("effa42c9-6e1e-4c3a-abaf-60a1298bc09d"),
                            CourseId = new Guid("845211e2-8208-47b1-a1e9-5a8649f39efb"),
                            HoleNumber = 5,
                            Length = 127,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("ef368b9d-ad39-488e-ba98-43080602ee88"),
                            CourseId = new Guid("845211e2-8208-47b1-a1e9-5a8649f39efb"),
                            HoleNumber = 6,
                            Length = 337,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("9f144300-6f27-4430-90fb-674d578555eb"),
                            CourseId = new Guid("845211e2-8208-47b1-a1e9-5a8649f39efb"),
                            HoleNumber = 7,
                            Length = 412,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("9ee3c8b7-c83a-4a4b-a753-794ff78be99d"),
                            CourseId = new Guid("845211e2-8208-47b1-a1e9-5a8649f39efb"),
                            HoleNumber = 8,
                            Length = 141,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("537f2035-07f1-4c88-bebf-90d79043825d"),
                            CourseId = new Guid("845211e2-8208-47b1-a1e9-5a8649f39efb"),
                            HoleNumber = 9,
                            Length = 365,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d7aac19-a210-4160-b3cc-fc46908a7465"),
                            CourseId = new Guid("39a40625-cd21-412a-af80-ce1f27ada556"),
                            TeeBox = 52
                        },
                        new
                        {
                            Id = new Guid("f53218e5-24ad-4e8b-85f3-7ae58f758766"),
                            CourseId = new Guid("845211e2-8208-47b1-a1e9-5a8649f39efb"),
                            TeeBox = 57
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("76d02e5a-863f-4fea-8863-c0e2549e560d"),
                            CourseId = new Guid("39a40625-cd21-412a-af80-ce1f27ada556"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Puts = 18,
                            Strokes = 33,
                            UserId = new Guid("70e0af13-50d3-435c-9d84-5b4b4395cbd5")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ee67c2a3-92f3-495d-965e-3b105abdf78e"),
                            HoleNumber = 1,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("76d02e5a-863f-4fea-8863-c0e2549e560d"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("617ea215-f758-4eeb-8f3a-cd4169fa2ad2"),
                            HoleNumber = 2,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("76d02e5a-863f-4fea-8863-c0e2549e560d"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("f95e5877-de0e-40e5-89d4-ff421a4d759f"),
                            HoleNumber = 3,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("76d02e5a-863f-4fea-8863-c0e2549e560d"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("cf908535-0959-4a41-af38-fa82fd3b6ccf"),
                            HoleNumber = 4,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("76d02e5a-863f-4fea-8863-c0e2549e560d"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("ee2c0fe4-6b94-4f2c-ae76-c2978a6ae934"),
                            HoleNumber = 5,
                            Par = 0,
                            Puts = 1,
                            RoundId = new Guid("76d02e5a-863f-4fea-8863-c0e2549e560d"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("d652dbc5-1ed3-4645-a2b5-1b9856dfbe9d"),
                            HoleNumber = 6,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("76d02e5a-863f-4fea-8863-c0e2549e560d"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("9a7225e0-d919-4a54-822f-680ab2cf0ea7"),
                            HoleNumber = 7,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("76d02e5a-863f-4fea-8863-c0e2549e560d"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("5d79b05d-c073-4eb5-acba-db02544dcb9a"),
                            HoleNumber = 8,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("76d02e5a-863f-4fea-8863-c0e2549e560d"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("32a22b35-13ff-4e03-8e74-4592fe2bdd8c"),
                            HoleNumber = 9,
                            Par = 0,
                            Puts = 3,
                            RoundId = new Guid("76d02e5a-863f-4fea-8863-c0e2549e560d"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
