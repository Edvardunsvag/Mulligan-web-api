// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Data;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    [Migration("20231016195859_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has18Holes")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c8ee096-a49b-4ae2-bfd5-8f8e5440b72c"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol golfklubb",
                            Has18Holes = false,
                            Length = 2606,
                            Par = 0
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8907b974-062f-4d86-9c91-4979cf1cb88b"),
                            CourseId = new Guid("2c8ee096-a49b-4ae2-bfd5-8f8e5440b72c"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("d825bda6-52c6-425a-a0e0-0acecc8d4cd0"),
                            CourseId = new Guid("2c8ee096-a49b-4ae2-bfd5-8f8e5440b72c"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("35e1a3b3-d14d-46a4-8833-b1035b9a53c2"),
                            CourseId = new Guid("2c8ee096-a49b-4ae2-bfd5-8f8e5440b72c"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("a710143e-0331-4e86-860b-c73c60be63a6"),
                            CourseId = new Guid("2c8ee096-a49b-4ae2-bfd5-8f8e5440b72c"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("2ff332b6-4063-467d-9093-0f3f71db2600"),
                            CourseId = new Guid("2c8ee096-a49b-4ae2-bfd5-8f8e5440b72c"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("3ce07f9a-2127-4eba-a63d-faeded8f4513"),
                            CourseId = new Guid("2c8ee096-a49b-4ae2-bfd5-8f8e5440b72c"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("67632ff3-90f0-497e-8308-3d2e53c6c901"),
                            CourseId = new Guid("2c8ee096-a49b-4ae2-bfd5-8f8e5440b72c"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("dd94fad2-f5ba-4a00-8f7c-5bff10b4f378"),
                            CourseId = new Guid("2c8ee096-a49b-4ae2-bfd5-8f8e5440b72c"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("4f011f0a-610b-45b8-8f65-946b289bff19"),
                            CourseId = new Guid("2c8ee096-a49b-4ae2-bfd5-8f8e5440b72c"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a170e173-1fb5-4f6d-ad8f-4ad1030ed1d7"),
                            CourseId = new Guid("2c8ee096-a49b-4ae2-bfd5-8f8e5440b72c"),
                            TeeBox = 52
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("d80c53a2-3dcd-4c89-9f91-bd69d6be8c73"),
                            CourseId = new Guid("2c8ee096-a49b-4ae2-bfd5-8f8e5440b72c"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Puts = 18,
                            Strokes = 33,
                            UserId = new Guid("d2395527-e513-47bf-a4b8-ed71dd533c9b")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5d0d99f-8a83-4439-890e-511eebed7328"),
                            HoleNumber = 1,
                            Puts = 2,
                            RoundId = new Guid("d80c53a2-3dcd-4c89-9f91-bd69d6be8c73"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("0bd7d4c1-aa84-463c-9087-ede284dd0931"),
                            HoleNumber = 2,
                            Puts = 2,
                            RoundId = new Guid("d80c53a2-3dcd-4c89-9f91-bd69d6be8c73"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("8f1662d0-4732-4c46-bee6-2c4e7be8a8cb"),
                            HoleNumber = 3,
                            Puts = 2,
                            RoundId = new Guid("d80c53a2-3dcd-4c89-9f91-bd69d6be8c73"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("451314cc-3b0b-4a42-9c7c-643ff5bcf53f"),
                            HoleNumber = 4,
                            Puts = 2,
                            RoundId = new Guid("d80c53a2-3dcd-4c89-9f91-bd69d6be8c73"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("5f305f32-aa9a-4f51-b919-f40faf5555ce"),
                            HoleNumber = 5,
                            Puts = 1,
                            RoundId = new Guid("d80c53a2-3dcd-4c89-9f91-bd69d6be8c73"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("5a143ab5-e846-47db-aea5-1fd7454c0f7c"),
                            HoleNumber = 6,
                            Puts = 2,
                            RoundId = new Guid("d80c53a2-3dcd-4c89-9f91-bd69d6be8c73"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("75f99277-522c-4d27-a52a-46711ddca27c"),
                            HoleNumber = 7,
                            Puts = 2,
                            RoundId = new Guid("d80c53a2-3dcd-4c89-9f91-bd69d6be8c73"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("04c9d4a0-1977-48ca-8f30-73ff98bca0b0"),
                            HoleNumber = 8,
                            Puts = 2,
                            RoundId = new Guid("d80c53a2-3dcd-4c89-9f91-bd69d6be8c73"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("9f6e3b42-ffa7-4cec-9b14-e2f0ad4ce9dd"),
                            HoleNumber = 9,
                            Puts = 3,
                            RoundId = new Guid("d80c53a2-3dcd-4c89-9f91-bd69d6be8c73"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
