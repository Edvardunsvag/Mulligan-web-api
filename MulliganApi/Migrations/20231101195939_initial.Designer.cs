// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Database;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    [Migration("20231101195939_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has18Holes")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e75c96b-c72f-4506-8e72-e70a96f30b07"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol golfklubb",
                            Has18Holes = false,
                            Length = 2606,
                            Par = 0
                        },
                        new
                        {
                            Id = new Guid("ff4da611-b939-421f-9cab-ea9834f08e81"),
                            CourseDescription = "Grønmo golfklubb description",
                            CourseName = "Grønmo golfklubb",
                            Has18Holes = false,
                            Length = 2870,
                            Par = 0
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("50d65a98-b836-4252-a83f-247bc0f7d640"),
                            CourseId = new Guid("6e75c96b-c72f-4506-8e72-e70a96f30b07"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("62c5f05e-51cf-4441-964e-05dc244b6732"),
                            CourseId = new Guid("6e75c96b-c72f-4506-8e72-e70a96f30b07"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("78e23492-ea21-4a7d-81ee-c5d63459e0d2"),
                            CourseId = new Guid("6e75c96b-c72f-4506-8e72-e70a96f30b07"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("6a08007d-d64a-426c-88c0-17d4cd59f371"),
                            CourseId = new Guid("6e75c96b-c72f-4506-8e72-e70a96f30b07"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("d293243b-6869-4be5-a619-fbae771eab12"),
                            CourseId = new Guid("6e75c96b-c72f-4506-8e72-e70a96f30b07"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("4aaf9cab-941d-4f9a-91c8-d19b0bf13343"),
                            CourseId = new Guid("6e75c96b-c72f-4506-8e72-e70a96f30b07"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("1463f5b7-bab1-4c81-8caa-46379151dcbc"),
                            CourseId = new Guid("6e75c96b-c72f-4506-8e72-e70a96f30b07"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("936e7ab3-5c39-4457-b1b3-57ebb7f28a46"),
                            CourseId = new Guid("6e75c96b-c72f-4506-8e72-e70a96f30b07"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("54631dd2-c291-473e-af3a-01088de59c7b"),
                            CourseId = new Guid("6e75c96b-c72f-4506-8e72-e70a96f30b07"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("14c4964e-bcf7-4a3d-ad72-46235a33c2a0"),
                            CourseId = new Guid("ff4da611-b939-421f-9cab-ea9834f08e81"),
                            HoleNumber = 1,
                            Length = 494,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("b0e9b111-d4f9-47f9-b045-9e7ef2c09853"),
                            CourseId = new Guid("ff4da611-b939-421f-9cab-ea9834f08e81"),
                            HoleNumber = 2,
                            Length = 266,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("1751b4b0-8047-4d79-87ef-3a1ce4ef64c8"),
                            CourseId = new Guid("ff4da611-b939-421f-9cab-ea9834f08e81"),
                            HoleNumber = 3,
                            Length = 361,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("4fdb9114-8aac-470a-b907-53e1db9e13b3"),
                            CourseId = new Guid("ff4da611-b939-421f-9cab-ea9834f08e81"),
                            HoleNumber = 4,
                            Length = 367,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("9ec42265-441a-45fb-a54f-708d93c89afb"),
                            CourseId = new Guid("ff4da611-b939-421f-9cab-ea9834f08e81"),
                            HoleNumber = 5,
                            Length = 127,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("c2939e30-9743-41a0-b626-c87487a861f8"),
                            CourseId = new Guid("ff4da611-b939-421f-9cab-ea9834f08e81"),
                            HoleNumber = 6,
                            Length = 337,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("3b63b6ff-d0cb-493b-bf43-1cb86bec0c55"),
                            CourseId = new Guid("ff4da611-b939-421f-9cab-ea9834f08e81"),
                            HoleNumber = 7,
                            Length = 412,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("b979a68b-de3f-471e-a684-5e32d1cb6ece"),
                            CourseId = new Guid("ff4da611-b939-421f-9cab-ea9834f08e81"),
                            HoleNumber = 8,
                            Length = 141,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("c7c2a1b5-70b0-4d3d-8eb5-cba6bed933b2"),
                            CourseId = new Guid("ff4da611-b939-421f-9cab-ea9834f08e81"),
                            HoleNumber = 9,
                            Length = 365,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9cd1f7e-02a7-4d89-896a-650207f5bb40"),
                            CourseId = new Guid("6e75c96b-c72f-4506-8e72-e70a96f30b07"),
                            TeeBox = 52
                        },
                        new
                        {
                            Id = new Guid("c76d5f65-0984-4b4a-8ba8-c11bfeb0f078"),
                            CourseId = new Guid("ff4da611-b939-421f-9cab-ea9834f08e81"),
                            TeeBox = 57
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("4ca40883-4e89-44b6-87cc-396b3c5f1389"),
                            CourseId = new Guid("6e75c96b-c72f-4506-8e72-e70a96f30b07"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Puts = 18,
                            Strokes = 33,
                            UserId = new Guid("79e23339-1c35-4f7f-b622-d187063b3273")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abd05452-f194-493d-85e8-e6995d837eaf"),
                            HoleNumber = 1,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("4ca40883-4e89-44b6-87cc-396b3c5f1389"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("676f56f6-6fbc-4bc1-b620-89d399d722ea"),
                            HoleNumber = 2,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("4ca40883-4e89-44b6-87cc-396b3c5f1389"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("9ede46fc-d3d8-4197-b3dd-bbb56f86e66e"),
                            HoleNumber = 3,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("4ca40883-4e89-44b6-87cc-396b3c5f1389"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("941e071e-d97c-464f-aa1a-575f5fd98772"),
                            HoleNumber = 4,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("4ca40883-4e89-44b6-87cc-396b3c5f1389"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("aed80410-770f-4588-97d1-214a7c7897da"),
                            HoleNumber = 5,
                            Par = 0,
                            Puts = 1,
                            RoundId = new Guid("4ca40883-4e89-44b6-87cc-396b3c5f1389"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("4d8c69de-c1ea-4c63-b7e0-c57091bc295b"),
                            HoleNumber = 6,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("4ca40883-4e89-44b6-87cc-396b3c5f1389"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("c2a30b33-d650-4dda-9654-6eaf0938b938"),
                            HoleNumber = 7,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("4ca40883-4e89-44b6-87cc-396b3c5f1389"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("b43b5b98-79be-45b3-8158-15fe002eaf34"),
                            HoleNumber = 8,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("4ca40883-4e89-44b6-87cc-396b3c5f1389"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("4caa65a5-4b4b-4089-a835-f89f9c3ead70"),
                            HoleNumber = 9,
                            Par = 0,
                            Puts = 3,
                            RoundId = new Guid("4ca40883-4e89-44b6-87cc-396b3c5f1389"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
