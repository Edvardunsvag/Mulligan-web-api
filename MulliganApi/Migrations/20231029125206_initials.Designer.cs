// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Database;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    [Migration("20231029125206_initials")]
    partial class initials
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has18Holes")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a859225-3c13-4ffa-a1e3-304c42385a74"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol golfklubb",
                            Has18Holes = false,
                            Length = 2606,
                            Par = 0
                        },
                        new
                        {
                            Id = new Guid("78e84de3-f148-4f08-accc-acbf3fc63f34"),
                            CourseDescription = "Grønmo golfklubb description",
                            CourseName = "Grønmo golfklubb",
                            Has18Holes = false,
                            Length = 2870,
                            Par = 0
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc9871ab-3e74-4581-baba-5e991f09bdc6"),
                            CourseId = new Guid("6a859225-3c13-4ffa-a1e3-304c42385a74"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("e6e95233-86ac-4887-b774-bb5b2bca6ed9"),
                            CourseId = new Guid("6a859225-3c13-4ffa-a1e3-304c42385a74"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("0d3af07c-622d-48a2-9390-458e0dad6ec5"),
                            CourseId = new Guid("6a859225-3c13-4ffa-a1e3-304c42385a74"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("fd2ebf69-7742-471e-b9cb-122653f03371"),
                            CourseId = new Guid("6a859225-3c13-4ffa-a1e3-304c42385a74"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("ba84d8b9-8a6f-4935-bcc2-b59d1320936e"),
                            CourseId = new Guid("6a859225-3c13-4ffa-a1e3-304c42385a74"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("2bf1d3ea-c04e-481d-8d62-40a6406dae5b"),
                            CourseId = new Guid("6a859225-3c13-4ffa-a1e3-304c42385a74"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("ff44a73c-e496-4798-931c-2d05dcc362a0"),
                            CourseId = new Guid("6a859225-3c13-4ffa-a1e3-304c42385a74"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("392ff825-4275-4084-a413-ce4013aee8f0"),
                            CourseId = new Guid("6a859225-3c13-4ffa-a1e3-304c42385a74"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("ae82b03d-310d-424f-aeeb-39bcc42acf68"),
                            CourseId = new Guid("6a859225-3c13-4ffa-a1e3-304c42385a74"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("039ef32b-d605-4cc0-95dc-93619bf8ed95"),
                            CourseId = new Guid("78e84de3-f148-4f08-accc-acbf3fc63f34"),
                            HoleNumber = 1,
                            Length = 494,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("9d12d2d2-c474-4ffe-9027-8c576f1e4f04"),
                            CourseId = new Guid("78e84de3-f148-4f08-accc-acbf3fc63f34"),
                            HoleNumber = 2,
                            Length = 266,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("8ab519d9-ceb3-43e1-8097-d9a669048a9f"),
                            CourseId = new Guid("78e84de3-f148-4f08-accc-acbf3fc63f34"),
                            HoleNumber = 3,
                            Length = 361,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("f1e67be3-777e-46a0-9dba-bf94898e79ba"),
                            CourseId = new Guid("78e84de3-f148-4f08-accc-acbf3fc63f34"),
                            HoleNumber = 4,
                            Length = 367,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("9f12ba1d-7e10-4b7d-8e2d-24e58e352762"),
                            CourseId = new Guid("78e84de3-f148-4f08-accc-acbf3fc63f34"),
                            HoleNumber = 5,
                            Length = 127,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("b4234f63-de81-4099-8cb8-ce400e8268a7"),
                            CourseId = new Guid("78e84de3-f148-4f08-accc-acbf3fc63f34"),
                            HoleNumber = 6,
                            Length = 337,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("63251eb3-495e-483e-b849-3add38906154"),
                            CourseId = new Guid("78e84de3-f148-4f08-accc-acbf3fc63f34"),
                            HoleNumber = 7,
                            Length = 412,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("69425fb8-a2f7-41b0-8a18-1bbec6a3f99d"),
                            CourseId = new Guid("78e84de3-f148-4f08-accc-acbf3fc63f34"),
                            HoleNumber = 8,
                            Length = 141,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("325a7135-98f3-4157-b94c-6aa7fa60e287"),
                            CourseId = new Guid("78e84de3-f148-4f08-accc-acbf3fc63f34"),
                            HoleNumber = 9,
                            Length = 365,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fadcaa3d-32fd-4bb6-ba6b-84e306aedc3e"),
                            CourseId = new Guid("6a859225-3c13-4ffa-a1e3-304c42385a74"),
                            TeeBox = 52
                        },
                        new
                        {
                            Id = new Guid("48e71f0c-605d-4e65-8425-ea57269e1f89"),
                            CourseId = new Guid("78e84de3-f148-4f08-accc-acbf3fc63f34"),
                            TeeBox = 57
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("73eccf22-c373-48c6-957f-86913d69a9f4"),
                            CourseId = new Guid("6a859225-3c13-4ffa-a1e3-304c42385a74"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Puts = 18,
                            Strokes = 33,
                            UserId = new Guid("1c77dc02-3a7f-4a03-b386-8fe026ae1872")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a721acd-c671-4d7c-a3ec-8f11615e4b71"),
                            HoleNumber = 1,
                            Puts = 2,
                            RoundId = new Guid("73eccf22-c373-48c6-957f-86913d69a9f4"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("b9615262-f37d-4d76-bd32-8b8da4abaecc"),
                            HoleNumber = 2,
                            Puts = 2,
                            RoundId = new Guid("73eccf22-c373-48c6-957f-86913d69a9f4"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("40d0fc03-4c42-4e23-bc80-bfe4502d32a0"),
                            HoleNumber = 3,
                            Puts = 2,
                            RoundId = new Guid("73eccf22-c373-48c6-957f-86913d69a9f4"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("c1ca1463-6c5e-4026-8211-02c82843e48d"),
                            HoleNumber = 4,
                            Puts = 2,
                            RoundId = new Guid("73eccf22-c373-48c6-957f-86913d69a9f4"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("f6e4ba48-adb7-4e1d-8b48-29fc78ea2380"),
                            HoleNumber = 5,
                            Puts = 1,
                            RoundId = new Guid("73eccf22-c373-48c6-957f-86913d69a9f4"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("ee13d361-4095-41c4-a7d9-b9a069b73d97"),
                            HoleNumber = 6,
                            Puts = 2,
                            RoundId = new Guid("73eccf22-c373-48c6-957f-86913d69a9f4"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("dc53d03e-e252-4796-aaee-43a731f04258"),
                            HoleNumber = 7,
                            Puts = 2,
                            RoundId = new Guid("73eccf22-c373-48c6-957f-86913d69a9f4"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("6cfaa537-35d0-45ae-b094-90e2d46151a4"),
                            HoleNumber = 8,
                            Puts = 2,
                            RoundId = new Guid("73eccf22-c373-48c6-957f-86913d69a9f4"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("e3e62f39-3226-47a5-83d5-e72bd127bf71"),
                            HoleNumber = 9,
                            Puts = 3,
                            RoundId = new Guid("73eccf22-c373-48c6-957f-86913d69a9f4"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
