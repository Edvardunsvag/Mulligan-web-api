// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Database;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    partial class MulliganDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has18Holes")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3768131-c080-473d-8de0-acedea072d60"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol golfklubb",
                            Has18Holes = false,
                            Length = 2606,
                            Par = 0
                        },
                        new
                        {
                            Id = new Guid("f460f95f-e682-408b-b585-181234cace6c"),
                            CourseDescription = "Grønmo golfklubb description",
                            CourseName = "Grønmo golfklubb",
                            Has18Holes = false,
                            Length = 2870,
                            Par = 0
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02d46e5d-5988-477d-bb53-743002b79daf"),
                            CourseId = new Guid("d3768131-c080-473d-8de0-acedea072d60"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("d727106c-7a8b-40ff-b932-cf4de8250282"),
                            CourseId = new Guid("d3768131-c080-473d-8de0-acedea072d60"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("cd4cf2d3-d95e-4537-b9d4-7a39e335eef4"),
                            CourseId = new Guid("d3768131-c080-473d-8de0-acedea072d60"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("371d923a-fb3b-4dd7-b24e-f7e287794fb3"),
                            CourseId = new Guid("d3768131-c080-473d-8de0-acedea072d60"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("7014a11b-f5a5-430f-b5fc-08fd837d0373"),
                            CourseId = new Guid("d3768131-c080-473d-8de0-acedea072d60"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("5e619a47-cb70-43c3-9f42-09d07c0522e8"),
                            CourseId = new Guid("d3768131-c080-473d-8de0-acedea072d60"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("06abdc75-f9c9-429e-8c3c-d71e8710fe58"),
                            CourseId = new Guid("d3768131-c080-473d-8de0-acedea072d60"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("9c6bc41c-1b2d-43be-ad5a-5273c8d6f284"),
                            CourseId = new Guid("d3768131-c080-473d-8de0-acedea072d60"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("71eb5d35-48b0-4396-88de-320a2facc56b"),
                            CourseId = new Guid("d3768131-c080-473d-8de0-acedea072d60"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("2f20eebe-ded0-45f0-8263-ef183c1993e5"),
                            CourseId = new Guid("f460f95f-e682-408b-b585-181234cace6c"),
                            HoleNumber = 1,
                            Length = 494,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("35c495ee-615c-4a36-84da-bb1e7c76a050"),
                            CourseId = new Guid("f460f95f-e682-408b-b585-181234cace6c"),
                            HoleNumber = 2,
                            Length = 266,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("63892120-3f40-4b1d-ba41-288025ac65f8"),
                            CourseId = new Guid("f460f95f-e682-408b-b585-181234cace6c"),
                            HoleNumber = 3,
                            Length = 361,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("c4d2d0e7-5ebb-4269-8898-9baabf9b7792"),
                            CourseId = new Guid("f460f95f-e682-408b-b585-181234cace6c"),
                            HoleNumber = 4,
                            Length = 367,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("1f62c851-57d5-46e0-a547-065fbfa1a392"),
                            CourseId = new Guid("f460f95f-e682-408b-b585-181234cace6c"),
                            HoleNumber = 5,
                            Length = 127,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("704875df-174f-46b9-ac47-032fc7cd5c4e"),
                            CourseId = new Guid("f460f95f-e682-408b-b585-181234cace6c"),
                            HoleNumber = 6,
                            Length = 337,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("91af6c59-2b9f-4875-ab68-afd5b666bafb"),
                            CourseId = new Guid("f460f95f-e682-408b-b585-181234cace6c"),
                            HoleNumber = 7,
                            Length = 412,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("47d1d281-afe1-4058-b819-38e00fc0471c"),
                            CourseId = new Guid("f460f95f-e682-408b-b585-181234cace6c"),
                            HoleNumber = 8,
                            Length = 141,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("2586ec13-a3d2-46d1-8d6a-1fb2051d1ce6"),
                            CourseId = new Guid("f460f95f-e682-408b-b585-181234cace6c"),
                            HoleNumber = 9,
                            Length = 365,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fae6f91b-1b31-4fd9-b147-88e1b55e5d6e"),
                            CourseId = new Guid("d3768131-c080-473d-8de0-acedea072d60"),
                            TeeBox = 52
                        },
                        new
                        {
                            Id = new Guid("68f3da4e-a1ba-4fb7-a5ee-e99e68ca70da"),
                            CourseId = new Guid("f460f95f-e682-408b-b585-181234cace6c"),
                            TeeBox = 57
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("d6ed0562-1142-4aa2-9e3f-a7fb821c0c1e"),
                            CourseId = new Guid("d3768131-c080-473d-8de0-acedea072d60"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Puts = 18,
                            Strokes = 33,
                            UserId = new Guid("12debba3-9ba6-41a9-a0a5-50f5704fe1c4")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51e32054-f18b-4211-9603-8612d7ab80f1"),
                            HoleNumber = 1,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("d6ed0562-1142-4aa2-9e3f-a7fb821c0c1e"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("108193c4-0862-4778-b9a9-028afbc9ade3"),
                            HoleNumber = 2,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("d6ed0562-1142-4aa2-9e3f-a7fb821c0c1e"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("3bd63512-8d7f-4cbc-bcf9-a2857087d093"),
                            HoleNumber = 3,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("d6ed0562-1142-4aa2-9e3f-a7fb821c0c1e"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("e1c153a2-a96d-4919-9c99-e85ee5315fae"),
                            HoleNumber = 4,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("d6ed0562-1142-4aa2-9e3f-a7fb821c0c1e"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("1113a40c-e712-4774-a1de-82296b00a2d6"),
                            HoleNumber = 5,
                            Par = 0,
                            Puts = 1,
                            RoundId = new Guid("d6ed0562-1142-4aa2-9e3f-a7fb821c0c1e"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("a970a466-c9ae-4ead-9020-fef4c1fe9e83"),
                            HoleNumber = 6,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("d6ed0562-1142-4aa2-9e3f-a7fb821c0c1e"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("591fa5ea-5247-45a0-a8d4-ff4c95564ccb"),
                            HoleNumber = 7,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("d6ed0562-1142-4aa2-9e3f-a7fb821c0c1e"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("8958ef32-356e-42b8-8266-f79db9496025"),
                            HoleNumber = 8,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("d6ed0562-1142-4aa2-9e3f-a7fb821c0c1e"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("1bf59a75-7811-4cc3-be90-50760e23644c"),
                            HoleNumber = 9,
                            Par = 0,
                            Puts = 3,
                            RoundId = new Guid("d6ed0562-1142-4aa2-9e3f-a7fb821c0c1e"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
