// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Database;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    partial class MulliganDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has18Holes")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ce3e054-61a5-4bed-b5c2-83d7c05101e0"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol golfklubb",
                            Has18Holes = false,
                            Length = 2606,
                            Par = 0
                        },
                        new
                        {
                            Id = new Guid("b01378e6-48a6-45f1-b828-9e278237f902"),
                            CourseDescription = "Grønmo golfklubb description",
                            CourseName = "Grønmo golfklubb",
                            Has18Holes = false,
                            Length = 2870,
                            Par = 0
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf1aeb96-4a11-41c2-86bc-1380458e9ec8"),
                            CourseId = new Guid("2ce3e054-61a5-4bed-b5c2-83d7c05101e0"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("88259d74-a6c6-4a3e-beb2-e35f6a8fc9d7"),
                            CourseId = new Guid("2ce3e054-61a5-4bed-b5c2-83d7c05101e0"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("cdf21c4b-2b63-470d-aee0-1d63fde3b74b"),
                            CourseId = new Guid("2ce3e054-61a5-4bed-b5c2-83d7c05101e0"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("ae6abc5c-7890-4784-a80e-40871a587806"),
                            CourseId = new Guid("2ce3e054-61a5-4bed-b5c2-83d7c05101e0"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("37c65371-57c8-4bdc-a599-e9808c7f9a24"),
                            CourseId = new Guid("2ce3e054-61a5-4bed-b5c2-83d7c05101e0"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("fc2404f8-c82f-4607-9c7b-0e61143870cb"),
                            CourseId = new Guid("2ce3e054-61a5-4bed-b5c2-83d7c05101e0"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("807da2a8-2719-4898-b326-bd3c021f9f74"),
                            CourseId = new Guid("2ce3e054-61a5-4bed-b5c2-83d7c05101e0"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("b9bcc910-1400-4496-8e44-dd31ffc7caee"),
                            CourseId = new Guid("2ce3e054-61a5-4bed-b5c2-83d7c05101e0"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("f4c653ee-9396-438e-84c2-2fe7ec183fc9"),
                            CourseId = new Guid("2ce3e054-61a5-4bed-b5c2-83d7c05101e0"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("1bc5d68a-92a8-4697-a764-00f360ae2c80"),
                            CourseId = new Guid("b01378e6-48a6-45f1-b828-9e278237f902"),
                            HoleNumber = 1,
                            Length = 494,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("35039ae0-7e41-4645-b627-f989c17150b3"),
                            CourseId = new Guid("b01378e6-48a6-45f1-b828-9e278237f902"),
                            HoleNumber = 2,
                            Length = 266,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("edac2ada-5bcf-4138-891b-08555b59908d"),
                            CourseId = new Guid("b01378e6-48a6-45f1-b828-9e278237f902"),
                            HoleNumber = 3,
                            Length = 361,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("c4896973-8265-47b1-955a-6ddedd52b7d7"),
                            CourseId = new Guid("b01378e6-48a6-45f1-b828-9e278237f902"),
                            HoleNumber = 4,
                            Length = 367,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("b98d1ae4-53f3-4186-8248-d1fbdb330402"),
                            CourseId = new Guid("b01378e6-48a6-45f1-b828-9e278237f902"),
                            HoleNumber = 5,
                            Length = 127,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("94e816b1-5254-43ad-ab5b-e6883dc48335"),
                            CourseId = new Guid("b01378e6-48a6-45f1-b828-9e278237f902"),
                            HoleNumber = 6,
                            Length = 337,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("2870fd0c-18b2-49a1-8224-9b95f2512697"),
                            CourseId = new Guid("b01378e6-48a6-45f1-b828-9e278237f902"),
                            HoleNumber = 7,
                            Length = 412,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("f6999fdc-57e0-4bdc-85f5-53d152faed0c"),
                            CourseId = new Guid("b01378e6-48a6-45f1-b828-9e278237f902"),
                            HoleNumber = 8,
                            Length = 141,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("59240783-a258-4343-bda8-252644b5a646"),
                            CourseId = new Guid("b01378e6-48a6-45f1-b828-9e278237f902"),
                            HoleNumber = 9,
                            Length = 365,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c31c7890-ccb4-4caa-a2d0-67f60cc900d5"),
                            CourseId = new Guid("2ce3e054-61a5-4bed-b5c2-83d7c05101e0"),
                            TeeBox = 52
                        },
                        new
                        {
                            Id = new Guid("8ea1dc5f-bfba-4cef-b3fb-ba0fb86e52da"),
                            CourseId = new Guid("b01378e6-48a6-45f1-b828-9e278237f902"),
                            TeeBox = 57
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("9531b2da-d555-482a-9840-f99329833474"),
                            CourseId = new Guid("2ce3e054-61a5-4bed-b5c2-83d7c05101e0"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Puts = 18,
                            Strokes = 33,
                            UserId = new Guid("1a9a92f7-d5fe-4573-95a3-90bd3463f537")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a2782c1-11a9-45ac-9e11-b1ffbd692f90"),
                            HoleNumber = 1,
                            Puts = 2,
                            RoundId = new Guid("9531b2da-d555-482a-9840-f99329833474"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("b1dfe152-63f9-442f-b4aa-90d6c6c06b98"),
                            HoleNumber = 2,
                            Puts = 2,
                            RoundId = new Guid("9531b2da-d555-482a-9840-f99329833474"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("1b703a39-e02d-4fb4-967e-7b63a0470ef9"),
                            HoleNumber = 3,
                            Puts = 2,
                            RoundId = new Guid("9531b2da-d555-482a-9840-f99329833474"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("65c3519e-9683-4020-90ad-be7547f2eb16"),
                            HoleNumber = 4,
                            Puts = 2,
                            RoundId = new Guid("9531b2da-d555-482a-9840-f99329833474"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("012d388b-ecd9-4b72-9fe2-c876d0f81703"),
                            HoleNumber = 5,
                            Puts = 1,
                            RoundId = new Guid("9531b2da-d555-482a-9840-f99329833474"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("23fe9e27-bbee-45ce-b245-58eb9d0d7637"),
                            HoleNumber = 6,
                            Puts = 2,
                            RoundId = new Guid("9531b2da-d555-482a-9840-f99329833474"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("642293c5-02fd-48e4-bed8-3e97528a1468"),
                            HoleNumber = 7,
                            Puts = 2,
                            RoundId = new Guid("9531b2da-d555-482a-9840-f99329833474"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("523ae6ec-17ce-48cc-94b9-0d8d0ffea7b4"),
                            HoleNumber = 8,
                            Puts = 2,
                            RoundId = new Guid("9531b2da-d555-482a-9840-f99329833474"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("56912364-aabb-4617-8cd9-4d65e9028483"),
                            HoleNumber = 9,
                            Puts = 3,
                            RoundId = new Guid("9531b2da-d555-482a-9840-f99329833474"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
