// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Data;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    partial class MulliganDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has18Holes")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("630c18b7-2d14-40a2-9bf5-00cffc77ab6c"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol golfklubb",
                            Has18Holes = false,
                            Length = 2606,
                            Par = 0
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6291085e-2fdb-433c-bb79-5f7456936f49"),
                            CourseId = new Guid("630c18b7-2d14-40a2-9bf5-00cffc77ab6c"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("f0b42efe-4c19-4cca-a79c-60509117ecad"),
                            CourseId = new Guid("630c18b7-2d14-40a2-9bf5-00cffc77ab6c"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("2900942b-962a-42dc-9727-c8ef6cdc215d"),
                            CourseId = new Guid("630c18b7-2d14-40a2-9bf5-00cffc77ab6c"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("b11f7da5-474d-4f20-92b9-1c7f137f4009"),
                            CourseId = new Guid("630c18b7-2d14-40a2-9bf5-00cffc77ab6c"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("50420abb-c17f-4008-8403-72fdcc5a2398"),
                            CourseId = new Guid("630c18b7-2d14-40a2-9bf5-00cffc77ab6c"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("fc39dd36-4164-448c-b12d-62873c9f548c"),
                            CourseId = new Guid("630c18b7-2d14-40a2-9bf5-00cffc77ab6c"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("61d9af83-16d8-489c-866e-78c78e201c3f"),
                            CourseId = new Guid("630c18b7-2d14-40a2-9bf5-00cffc77ab6c"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("a2924e5f-4555-4420-acb0-7c9fa91cd20f"),
                            CourseId = new Guid("630c18b7-2d14-40a2-9bf5-00cffc77ab6c"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("3bf83bff-af68-493a-b1ac-6c28470fae16"),
                            CourseId = new Guid("630c18b7-2d14-40a2-9bf5-00cffc77ab6c"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7fb7e19-1996-4e24-a4ac-e32f75a42910"),
                            CourseId = new Guid("630c18b7-2d14-40a2-9bf5-00cffc77ab6c"),
                            TeeBox = 52
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("10c15123-76a9-42a7-87dc-0f95e1145f68"),
                            CourseId = new Guid("630c18b7-2d14-40a2-9bf5-00cffc77ab6c"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Puts = 18,
                            Strokes = 33,
                            UserId = new Guid("08108351-b943-45df-9c19-52d95e6707c3")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("820873a1-a7d8-474d-857e-b188403cadb9"),
                            HoleNumber = 1,
                            Puts = 2,
                            RoundId = new Guid("10c15123-76a9-42a7-87dc-0f95e1145f68"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("9d4a2364-ee8e-4b4f-8fc5-765ef48ad47e"),
                            HoleNumber = 2,
                            Puts = 2,
                            RoundId = new Guid("10c15123-76a9-42a7-87dc-0f95e1145f68"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("83ebea39-ab40-4dc6-a3f7-6880f02b553b"),
                            HoleNumber = 3,
                            Puts = 2,
                            RoundId = new Guid("10c15123-76a9-42a7-87dc-0f95e1145f68"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("af3c61fb-9bf1-4244-9c2b-db687584989e"),
                            HoleNumber = 4,
                            Puts = 2,
                            RoundId = new Guid("10c15123-76a9-42a7-87dc-0f95e1145f68"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("76d6830f-9d51-4077-9530-4de8ee34f72b"),
                            HoleNumber = 5,
                            Puts = 1,
                            RoundId = new Guid("10c15123-76a9-42a7-87dc-0f95e1145f68"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("563db00b-f159-4e66-801f-217f3dabd7bf"),
                            HoleNumber = 6,
                            Puts = 2,
                            RoundId = new Guid("10c15123-76a9-42a7-87dc-0f95e1145f68"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("c953e9a2-6c9a-4461-8278-bd04be904276"),
                            HoleNumber = 7,
                            Puts = 2,
                            RoundId = new Guid("10c15123-76a9-42a7-87dc-0f95e1145f68"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("71643069-398f-4211-bb90-333e104f16c7"),
                            HoleNumber = 8,
                            Puts = 2,
                            RoundId = new Guid("10c15123-76a9-42a7-87dc-0f95e1145f68"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("50d52b9f-5cbb-4ae0-b1ec-4d0988b3707f"),
                            HoleNumber = 9,
                            Puts = 3,
                            RoundId = new Guid("10c15123-76a9-42a7-87dc-0f95e1145f68"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
