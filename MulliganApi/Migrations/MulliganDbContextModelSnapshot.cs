// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Data;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    partial class MulliganDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1939f6f0-d52e-4198-8a22-ee86f1629056"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol",
                            Par = 0
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1f7337f-cce1-4f2c-9a8c-ea994f67e2c2"),
                            CourseId = new Guid("1939f6f0-d52e-4198-8a22-ee86f1629056"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("607078bc-75f7-4b19-b5fb-8c64f1349847"),
                            CourseId = new Guid("1939f6f0-d52e-4198-8a22-ee86f1629056"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("259708bd-e50f-4a78-ae7c-c2a106637a2b"),
                            CourseId = new Guid("1939f6f0-d52e-4198-8a22-ee86f1629056"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("d504b548-ecd1-4848-9ce8-a64aeb893254"),
                            CourseId = new Guid("1939f6f0-d52e-4198-8a22-ee86f1629056"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("1e818065-bbbf-4a9b-82b2-f6dafb34bf79"),
                            CourseId = new Guid("1939f6f0-d52e-4198-8a22-ee86f1629056"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("d4a4b792-b60c-45aa-81d3-c5e7e3e9efbe"),
                            CourseId = new Guid("1939f6f0-d52e-4198-8a22-ee86f1629056"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("f6725d64-f56c-4fc9-86de-c1cf98753473"),
                            CourseId = new Guid("1939f6f0-d52e-4198-8a22-ee86f1629056"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("1a4f5b68-b2e8-4410-9e4c-57a45deafa8f"),
                            CourseId = new Guid("1939f6f0-d52e-4198-8a22-ee86f1629056"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("5b4ea064-2073-48c8-a149-62a7d708ec13"),
                            CourseId = new Guid("1939f6f0-d52e-4198-8a22-ee86f1629056"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("54831e4f-4e5e-4a0d-ac63-a89bb61cd613"),
                            CourseId = new Guid("1939f6f0-d52e-4198-8a22-ee86f1629056"),
                            TeeBox = 52
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("b1add512-3c5a-4f0f-b686-3605098da85e"),
                            CourseId = new Guid("1939f6f0-d52e-4198-8a22-ee86f1629056"),
                            Strokes = 45,
                            UserId = new Guid("da926bbc-bf4c-45b8-9a96-9b02b6ddde7a")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a35c896-f929-4f6a-9754-429ff9f9ad25"),
                            HoleNumber = 1,
                            RoundId = new Guid("b1add512-3c5a-4f0f-b686-3605098da85e"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("3f48652f-500a-4f86-b5b8-d281311c8dd8"),
                            HoleNumber = 2,
                            RoundId = new Guid("b1add512-3c5a-4f0f-b686-3605098da85e"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("5da681fa-5069-4bdc-b37a-baefbd6cf5e6"),
                            HoleNumber = 3,
                            RoundId = new Guid("b1add512-3c5a-4f0f-b686-3605098da85e"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("848f3234-ff41-4c2c-9c71-31d90a666829"),
                            HoleNumber = 4,
                            RoundId = new Guid("b1add512-3c5a-4f0f-b686-3605098da85e"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("2262d45b-b0be-44b4-938f-1002077caa7b"),
                            HoleNumber = 5,
                            RoundId = new Guid("b1add512-3c5a-4f0f-b686-3605098da85e"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("44ecc7cb-82ce-487d-9dbf-4719866e138c"),
                            HoleNumber = 6,
                            RoundId = new Guid("b1add512-3c5a-4f0f-b686-3605098da85e"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("307f24ea-04e7-42c8-a6d4-f228e50444b1"),
                            HoleNumber = 7,
                            RoundId = new Guid("b1add512-3c5a-4f0f-b686-3605098da85e"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("b9b43e25-53e7-4d78-b9fb-f25a02f50b3c"),
                            HoleNumber = 8,
                            RoundId = new Guid("b1add512-3c5a-4f0f-b686-3605098da85e"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("ae327e63-ff49-4d83-98f8-b496da758c72"),
                            HoleNumber = 9,
                            RoundId = new Guid("b1add512-3c5a-4f0f-b686-3605098da85e"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
