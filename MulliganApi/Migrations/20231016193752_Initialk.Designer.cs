// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Data;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    [Migration("20231016193752_Initialk")]
    partial class Initialk
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has18Holes")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0831e002-40fb-4303-bdd9-ccf8a7b0a12e"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol golfklubb",
                            Has18Holes = false,
                            Length = 2606,
                            Par = 0
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("948e2c21-1d4c-4834-891a-2b2cace754e9"),
                            CourseId = new Guid("0831e002-40fb-4303-bdd9-ccf8a7b0a12e"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("8ea32f57-4055-4401-8d30-faf17826b0ef"),
                            CourseId = new Guid("0831e002-40fb-4303-bdd9-ccf8a7b0a12e"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("aee94310-dc83-4c60-a6cd-a305758a19e1"),
                            CourseId = new Guid("0831e002-40fb-4303-bdd9-ccf8a7b0a12e"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("25a86e87-5011-421b-97f6-790f2027bf2d"),
                            CourseId = new Guid("0831e002-40fb-4303-bdd9-ccf8a7b0a12e"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("9ec6e68e-d7bf-419c-af2e-1765d36529bf"),
                            CourseId = new Guid("0831e002-40fb-4303-bdd9-ccf8a7b0a12e"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("ac6178e6-ee89-4bde-9ac4-662e6ecbe2bf"),
                            CourseId = new Guid("0831e002-40fb-4303-bdd9-ccf8a7b0a12e"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("de132c59-4cde-4d2c-b159-c762d4ee2d2d"),
                            CourseId = new Guid("0831e002-40fb-4303-bdd9-ccf8a7b0a12e"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("8b0e0761-d1f9-44f8-b63d-f0f4711e6f13"),
                            CourseId = new Guid("0831e002-40fb-4303-bdd9-ccf8a7b0a12e"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("344974ef-d410-4db5-be4b-1045aebb6070"),
                            CourseId = new Guid("0831e002-40fb-4303-bdd9-ccf8a7b0a12e"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1328b209-546f-4cca-84b5-d6bdce7e9310"),
                            CourseId = new Guid("0831e002-40fb-4303-bdd9-ccf8a7b0a12e"),
                            TeeBox = 52
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("9729d711-2906-4f68-9c85-6625d0810249"),
                            CourseId = new Guid("0831e002-40fb-4303-bdd9-ccf8a7b0a12e"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Puts = 18,
                            Strokes = 33,
                            UserId = new Guid("694122ad-7eee-4932-bab2-82fa2bfc2e25")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("843b2552-19b8-47dd-8ad3-60bee399b524"),
                            HoleNumber = 1,
                            Puts = 2,
                            RoundId = new Guid("9729d711-2906-4f68-9c85-6625d0810249"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("0ed6ea83-f255-4266-9e4e-a90ece2464b0"),
                            HoleNumber = 2,
                            Puts = 2,
                            RoundId = new Guid("9729d711-2906-4f68-9c85-6625d0810249"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("bc64ecf7-99c0-46cb-b38e-5279a2615488"),
                            HoleNumber = 3,
                            Puts = 2,
                            RoundId = new Guid("9729d711-2906-4f68-9c85-6625d0810249"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("4f2eaa83-5f5b-412e-9aec-213a259d5ede"),
                            HoleNumber = 4,
                            Puts = 2,
                            RoundId = new Guid("9729d711-2906-4f68-9c85-6625d0810249"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("40e811c1-9400-4c8e-b265-63b0a2fd0859"),
                            HoleNumber = 5,
                            Puts = 1,
                            RoundId = new Guid("9729d711-2906-4f68-9c85-6625d0810249"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("549f43bb-46b0-4535-8fcb-264a4aab4aac"),
                            HoleNumber = 6,
                            Puts = 2,
                            RoundId = new Guid("9729d711-2906-4f68-9c85-6625d0810249"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("a6c607e4-ba4b-4351-96de-9da9deae347e"),
                            HoleNumber = 7,
                            Puts = 2,
                            RoundId = new Guid("9729d711-2906-4f68-9c85-6625d0810249"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("4e99882c-d770-4ca0-b518-7f35ce8ea79b"),
                            HoleNumber = 8,
                            Puts = 2,
                            RoundId = new Guid("9729d711-2906-4f68-9c85-6625d0810249"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("803c15e5-6b93-49c0-a534-2bf9acabca4c"),
                            HoleNumber = 9,
                            Puts = 3,
                            RoundId = new Guid("9729d711-2906-4f68-9c85-6625d0810249"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
