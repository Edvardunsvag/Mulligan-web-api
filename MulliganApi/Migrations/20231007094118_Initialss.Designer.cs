// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Data;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    [Migration("20231007094118_Initialss")]
    partial class Initialss
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has18Holes")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd1cef2b-cc06-4c64-950f-3aa5e84a16f6"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol",
                            Has18Holes = false,
                            Length = 9,
                            Par = 0
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85edf5a7-12f8-42b4-9350-030cd7bf2ed4"),
                            CourseId = new Guid("fd1cef2b-cc06-4c64-950f-3aa5e84a16f6"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("bfc45fc0-3a38-4783-8055-352ace88d720"),
                            CourseId = new Guid("fd1cef2b-cc06-4c64-950f-3aa5e84a16f6"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("0b20565e-3877-4fa3-a68b-f841fe84c55b"),
                            CourseId = new Guid("fd1cef2b-cc06-4c64-950f-3aa5e84a16f6"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("fd8a9273-cdac-4bce-9949-edde3a321e6d"),
                            CourseId = new Guid("fd1cef2b-cc06-4c64-950f-3aa5e84a16f6"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("4b6a3094-7934-498c-9c37-1fe84b860f69"),
                            CourseId = new Guid("fd1cef2b-cc06-4c64-950f-3aa5e84a16f6"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("d7824f57-03fb-4757-b2ab-83952a3b2f86"),
                            CourseId = new Guid("fd1cef2b-cc06-4c64-950f-3aa5e84a16f6"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("9c76b30d-39cb-4604-9790-77a3a4ca3de3"),
                            CourseId = new Guid("fd1cef2b-cc06-4c64-950f-3aa5e84a16f6"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("acef557f-f992-4830-a03c-0257f1f25c2a"),
                            CourseId = new Guid("fd1cef2b-cc06-4c64-950f-3aa5e84a16f6"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("acbf954d-d076-48c0-a189-dd9a441c6af7"),
                            CourseId = new Guid("fd1cef2b-cc06-4c64-950f-3aa5e84a16f6"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d226fb7-fa19-4952-b6b0-d26bbc68b9bc"),
                            CourseId = new Guid("fd1cef2b-cc06-4c64-950f-3aa5e84a16f6"),
                            TeeBox = 52
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("5d55e271-7f64-4e34-a86c-7799d9bcddc2"),
                            CourseId = new Guid("fd1cef2b-cc06-4c64-950f-3aa5e84a16f6"),
                            Puts = 18,
                            Strokes = 45,
                            UserId = new Guid("36ff434e-32df-4f07-b930-0f9810565e08")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("92e78faf-3bd6-4dee-885f-1d5a7361f479"),
                            HoleNumber = 1,
                            Puts = 2,
                            RoundId = new Guid("5d55e271-7f64-4e34-a86c-7799d9bcddc2"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("0e77af22-5212-430d-b2d9-4ab9023e131d"),
                            HoleNumber = 2,
                            Puts = 2,
                            RoundId = new Guid("5d55e271-7f64-4e34-a86c-7799d9bcddc2"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("4d64082a-30c9-437d-86d8-4b3649d05e1c"),
                            HoleNumber = 3,
                            Puts = 2,
                            RoundId = new Guid("5d55e271-7f64-4e34-a86c-7799d9bcddc2"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("69d6b8f5-3982-42e5-b198-6b52a288c19b"),
                            HoleNumber = 4,
                            Puts = 2,
                            RoundId = new Guid("5d55e271-7f64-4e34-a86c-7799d9bcddc2"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("8c774b2f-349a-40ed-932e-a3a7b6ebe9b8"),
                            HoleNumber = 5,
                            Puts = 1,
                            RoundId = new Guid("5d55e271-7f64-4e34-a86c-7799d9bcddc2"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("32e45698-524c-42bc-be53-0c6105a28071"),
                            HoleNumber = 6,
                            Puts = 2,
                            RoundId = new Guid("5d55e271-7f64-4e34-a86c-7799d9bcddc2"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("abcd7889-4aa3-4372-b817-2e6e36f8a4d4"),
                            HoleNumber = 7,
                            Puts = 2,
                            RoundId = new Guid("5d55e271-7f64-4e34-a86c-7799d9bcddc2"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("dc18a705-221a-4d5c-9eef-39824d6c73c4"),
                            HoleNumber = 8,
                            Puts = 2,
                            RoundId = new Guid("5d55e271-7f64-4e34-a86c-7799d9bcddc2"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("ba2100ca-e068-4a35-a8d3-0970755c96af"),
                            HoleNumber = 9,
                            Puts = 3,
                            RoundId = new Guid("5d55e271-7f64-4e34-a86c-7799d9bcddc2"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
