// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Data;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    [Migration("20231016165024_AddedDateToRound")]
    partial class AddedDateToRound
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has18Holes")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("603590d4-86f5-44d0-8054-9007c75d01df"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol golfklubb",
                            Has18Holes = false,
                            Length = 2606,
                            Par = 0
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0351ed02-76e8-4a8b-9995-aea8dcec374a"),
                            CourseId = new Guid("603590d4-86f5-44d0-8054-9007c75d01df"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("fde3d2e8-1cba-4a04-8ec2-127234c61750"),
                            CourseId = new Guid("603590d4-86f5-44d0-8054-9007c75d01df"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("c2047cf0-6041-4a4c-807f-ecfc48de3c9b"),
                            CourseId = new Guid("603590d4-86f5-44d0-8054-9007c75d01df"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("a733ca41-342c-44fc-8591-b396b1c8319f"),
                            CourseId = new Guid("603590d4-86f5-44d0-8054-9007c75d01df"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("735726ed-b5a5-46ef-8991-09c555e603f3"),
                            CourseId = new Guid("603590d4-86f5-44d0-8054-9007c75d01df"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("480fb4b7-dcea-4579-89bc-7c98d24c1ca6"),
                            CourseId = new Guid("603590d4-86f5-44d0-8054-9007c75d01df"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("1501c156-2c79-433f-9734-50542a2c8b43"),
                            CourseId = new Guid("603590d4-86f5-44d0-8054-9007c75d01df"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("60cfd858-2d59-48f0-a3b4-6e74d79efe2f"),
                            CourseId = new Guid("603590d4-86f5-44d0-8054-9007c75d01df"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("c04d3679-65a9-4239-ac59-ff3c119ee195"),
                            CourseId = new Guid("603590d4-86f5-44d0-8054-9007c75d01df"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("181a8314-dea4-40db-961c-c66639673c84"),
                            CourseId = new Guid("603590d4-86f5-44d0-8054-9007c75d01df"),
                            TeeBox = 52
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("d0c93632-be15-4a53-84dc-8aa23761fa9b"),
                            CourseId = new Guid("603590d4-86f5-44d0-8054-9007c75d01df"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Puts = 18,
                            Strokes = 33,
                            UserId = new Guid("1a003d39-a7fb-47a5-852e-cc4537589ebd")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6645fa67-3787-4170-b9f5-e402c5d13cf4"),
                            HoleNumber = 1,
                            Puts = 2,
                            RoundId = new Guid("d0c93632-be15-4a53-84dc-8aa23761fa9b"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("1971114b-7a86-4fbc-8321-b515b3956fce"),
                            HoleNumber = 2,
                            Puts = 2,
                            RoundId = new Guid("d0c93632-be15-4a53-84dc-8aa23761fa9b"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("bd191f24-5039-4cab-9b1b-a0295efd2d01"),
                            HoleNumber = 3,
                            Puts = 2,
                            RoundId = new Guid("d0c93632-be15-4a53-84dc-8aa23761fa9b"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("370017fa-8175-4789-bc38-9b83232477e4"),
                            HoleNumber = 4,
                            Puts = 2,
                            RoundId = new Guid("d0c93632-be15-4a53-84dc-8aa23761fa9b"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("23a63297-6457-470c-98fe-6e6e4001cd70"),
                            HoleNumber = 5,
                            Puts = 1,
                            RoundId = new Guid("d0c93632-be15-4a53-84dc-8aa23761fa9b"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("ca1accd7-1ef3-4d96-ae9a-446bb0319676"),
                            HoleNumber = 6,
                            Puts = 2,
                            RoundId = new Guid("d0c93632-be15-4a53-84dc-8aa23761fa9b"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("11488248-4e0f-45d8-a7d2-e7317a27ec59"),
                            HoleNumber = 7,
                            Puts = 2,
                            RoundId = new Guid("d0c93632-be15-4a53-84dc-8aa23761fa9b"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("f9217701-8e51-4755-995a-70544cf23789"),
                            HoleNumber = 8,
                            Puts = 2,
                            RoundId = new Guid("d0c93632-be15-4a53-84dc-8aa23761fa9b"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("bad6f067-37b9-43a0-aa87-d7c42b033e92"),
                            HoleNumber = 9,
                            Puts = 3,
                            RoundId = new Guid("d0c93632-be15-4a53-84dc-8aa23761fa9b"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
