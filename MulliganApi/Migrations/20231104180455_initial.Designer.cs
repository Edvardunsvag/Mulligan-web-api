// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Database;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    [Migration("20231104180455_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has18Holes")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("765df59f-c3e8-4952-818e-10b5f25bc26b"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol golfklubb",
                            Has18Holes = false,
                            Length = 2606,
                            Par = 36
                        },
                        new
                        {
                            Id = new Guid("63000723-111e-4929-91e6-c25bd8072e74"),
                            CourseDescription = "Grønmo golfklubb description",
                            CourseName = "Grønmo golfklubb",
                            Has18Holes = false,
                            Length = 2870,
                            Par = 37
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2828cef8-9f2f-46b8-b4fc-170e3b75f1ea"),
                            CourseId = new Guid("765df59f-c3e8-4952-818e-10b5f25bc26b"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("eb133c6b-08ac-44a6-bbb0-b458b77f034a"),
                            CourseId = new Guid("765df59f-c3e8-4952-818e-10b5f25bc26b"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("1e16e3bc-3a96-4a7d-b4aa-30a50e64c714"),
                            CourseId = new Guid("765df59f-c3e8-4952-818e-10b5f25bc26b"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("96dc33c4-9e19-456a-8983-1035ccd6b8f5"),
                            CourseId = new Guid("765df59f-c3e8-4952-818e-10b5f25bc26b"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("52f1d5ff-e33e-41ed-80e6-3acb64884971"),
                            CourseId = new Guid("765df59f-c3e8-4952-818e-10b5f25bc26b"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("f3167de7-b558-4453-8e36-ac8d964e5fd0"),
                            CourseId = new Guid("765df59f-c3e8-4952-818e-10b5f25bc26b"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("85b09f55-b498-4f71-922d-c9ed8f1c3108"),
                            CourseId = new Guid("765df59f-c3e8-4952-818e-10b5f25bc26b"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("3937d1b1-a709-41b5-958e-d364c28acc28"),
                            CourseId = new Guid("765df59f-c3e8-4952-818e-10b5f25bc26b"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("3e9619ba-dd9b-42d3-aa55-cc24bac02777"),
                            CourseId = new Guid("765df59f-c3e8-4952-818e-10b5f25bc26b"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("19700d58-c005-4ebb-a055-331a56415cc7"),
                            CourseId = new Guid("63000723-111e-4929-91e6-c25bd8072e74"),
                            HoleNumber = 1,
                            Length = 494,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("4ff9a4c1-7883-4f6d-9051-a3e0421a4861"),
                            CourseId = new Guid("63000723-111e-4929-91e6-c25bd8072e74"),
                            HoleNumber = 2,
                            Length = 266,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("011a8261-d8b2-4db8-8a45-0e95cad819fc"),
                            CourseId = new Guid("63000723-111e-4929-91e6-c25bd8072e74"),
                            HoleNumber = 3,
                            Length = 361,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("7be94ef3-0b9c-4ebe-b3bb-92f58d86d89b"),
                            CourseId = new Guid("63000723-111e-4929-91e6-c25bd8072e74"),
                            HoleNumber = 4,
                            Length = 367,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("f9f6a439-29c5-48e9-8bb1-a816c77d7c0d"),
                            CourseId = new Guid("63000723-111e-4929-91e6-c25bd8072e74"),
                            HoleNumber = 5,
                            Length = 127,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("1d6267e2-075d-49c8-aa40-b621cd58039b"),
                            CourseId = new Guid("63000723-111e-4929-91e6-c25bd8072e74"),
                            HoleNumber = 6,
                            Length = 337,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("95616e1f-dc91-4c34-8a08-a5ae582b53d7"),
                            CourseId = new Guid("63000723-111e-4929-91e6-c25bd8072e74"),
                            HoleNumber = 7,
                            Length = 412,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("203eb9d2-b3b4-406d-8ee5-850466fef3b7"),
                            CourseId = new Guid("63000723-111e-4929-91e6-c25bd8072e74"),
                            HoleNumber = 8,
                            Length = 141,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("0de108be-ad50-48ce-8ffa-c97de26de5c0"),
                            CourseId = new Guid("63000723-111e-4929-91e6-c25bd8072e74"),
                            HoleNumber = 9,
                            Length = 365,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc04c0ac-2c3b-4a11-9439-69d99f4846f1"),
                            CourseId = new Guid("765df59f-c3e8-4952-818e-10b5f25bc26b"),
                            TeeBox = 52
                        },
                        new
                        {
                            Id = new Guid("70d1414c-7580-440a-8216-392c8f5197be"),
                            CourseId = new Guid("63000723-111e-4929-91e6-c25bd8072e74"),
                            TeeBox = 57
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("6d6bd9b9-9c0e-4aaa-ac7b-84728d7daf80"),
                            CourseId = new Guid("765df59f-c3e8-4952-818e-10b5f25bc26b"),
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Puts = 18,
                            Strokes = 33,
                            UserId = new Guid("3b6b597d-3229-439f-acb5-14e8b7ced20f")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44934452-41a1-402d-8cad-e66752b75be5"),
                            HoleNumber = 1,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("6d6bd9b9-9c0e-4aaa-ac7b-84728d7daf80"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("fd7d736c-b302-41b9-95ec-e339294eb591"),
                            HoleNumber = 2,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("6d6bd9b9-9c0e-4aaa-ac7b-84728d7daf80"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("ef73b9ee-b93c-4bc9-9843-4e3227b6e133"),
                            HoleNumber = 3,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("6d6bd9b9-9c0e-4aaa-ac7b-84728d7daf80"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("986a20ce-48da-499c-a369-d3b5ec6126b9"),
                            HoleNumber = 4,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("6d6bd9b9-9c0e-4aaa-ac7b-84728d7daf80"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("21df039e-0075-47e8-9494-ae2bd95f8329"),
                            HoleNumber = 5,
                            Par = 0,
                            Puts = 1,
                            RoundId = new Guid("6d6bd9b9-9c0e-4aaa-ac7b-84728d7daf80"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("59d355a8-df78-4bed-aa55-32dbce47d875"),
                            HoleNumber = 6,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("6d6bd9b9-9c0e-4aaa-ac7b-84728d7daf80"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("21aeae75-fef4-4c47-add3-a078cd74c296"),
                            HoleNumber = 7,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("6d6bd9b9-9c0e-4aaa-ac7b-84728d7daf80"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("61f66490-adf9-4f0c-ba76-d427aab16339"),
                            HoleNumber = 8,
                            Par = 0,
                            Puts = 2,
                            RoundId = new Guid("6d6bd9b9-9c0e-4aaa-ac7b-84728d7daf80"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("9c5ec71c-23a9-4cf0-add6-dc95fddf772b"),
                            HoleNumber = 9,
                            Par = 0,
                            Puts = 3,
                            RoundId = new Guid("6d6bd9b9-9c0e-4aaa-ac7b-84728d7daf80"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
