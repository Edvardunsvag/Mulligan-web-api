// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Database;

#nullable disable

namespace MulliganApi.Database.migrations
{
    [DbContext(typeof(MulliganDbContext))]
    partial class MulliganDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has18Holes")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff1d75b1-b9ec-4f99-b007-f204c42abb1d"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol golfklubb",
                            Has18Holes = false,
                            Length = 2606,
                            Par = 36
                        },
                        new
                        {
                            Id = new Guid("1a993ed4-841f-4cdd-baac-81f170e66f0d"),
                            CourseDescription = "Grønmo golfklubb description",
                            CourseName = "Grønmo golfklubb",
                            Has18Holes = false,
                            Length = 2870,
                            Par = 37
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35ee1143-e546-4e68-8fbf-e535a58ebbf7"),
                            CourseId = new Guid("ff1d75b1-b9ec-4f99-b007-f204c42abb1d"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("c7623d09-4766-477b-815f-ef4a478a48b9"),
                            CourseId = new Guid("ff1d75b1-b9ec-4f99-b007-f204c42abb1d"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("912b0dc1-9121-4f5e-a3fb-8acff229a45b"),
                            CourseId = new Guid("ff1d75b1-b9ec-4f99-b007-f204c42abb1d"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("b95bf5ff-59bd-4fe9-9387-b6dd14e25de0"),
                            CourseId = new Guid("ff1d75b1-b9ec-4f99-b007-f204c42abb1d"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("da5b21ba-d785-42c5-ba3d-3027267c56a6"),
                            CourseId = new Guid("ff1d75b1-b9ec-4f99-b007-f204c42abb1d"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("d24bf1c5-57b8-4f9a-945a-3ee29e908039"),
                            CourseId = new Guid("ff1d75b1-b9ec-4f99-b007-f204c42abb1d"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("9ee77ff2-edcb-4ee7-a03b-0a786fcd4bd7"),
                            CourseId = new Guid("ff1d75b1-b9ec-4f99-b007-f204c42abb1d"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("77c2ff0b-288e-4f7a-bce4-2aa6fa57f46e"),
                            CourseId = new Guid("ff1d75b1-b9ec-4f99-b007-f204c42abb1d"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("d1267429-61c8-4ed9-945b-5fb8125b6b5f"),
                            CourseId = new Guid("ff1d75b1-b9ec-4f99-b007-f204c42abb1d"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("d9a8bdaf-2f29-43b1-9d6b-d49a44021c37"),
                            CourseId = new Guid("1a993ed4-841f-4cdd-baac-81f170e66f0d"),
                            HoleNumber = 1,
                            Length = 494,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("5c4eab66-2d77-41cf-ad83-014bb886013f"),
                            CourseId = new Guid("1a993ed4-841f-4cdd-baac-81f170e66f0d"),
                            HoleNumber = 2,
                            Length = 266,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("f4510dbd-044f-43aa-b8dc-6121b0975769"),
                            CourseId = new Guid("1a993ed4-841f-4cdd-baac-81f170e66f0d"),
                            HoleNumber = 3,
                            Length = 361,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("88ba968e-965f-4190-85f6-32eb1a30f4b1"),
                            CourseId = new Guid("1a993ed4-841f-4cdd-baac-81f170e66f0d"),
                            HoleNumber = 4,
                            Length = 367,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("48ced368-512e-4429-9b49-a240acac040c"),
                            CourseId = new Guid("1a993ed4-841f-4cdd-baac-81f170e66f0d"),
                            HoleNumber = 5,
                            Length = 127,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("5980a636-f583-4beb-9860-0a1524a4b7b6"),
                            CourseId = new Guid("1a993ed4-841f-4cdd-baac-81f170e66f0d"),
                            HoleNumber = 6,
                            Length = 337,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("85e17aad-60df-462b-a3ca-601c36176c0a"),
                            CourseId = new Guid("1a993ed4-841f-4cdd-baac-81f170e66f0d"),
                            HoleNumber = 7,
                            Length = 412,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("68f13970-ffd8-4f9f-b203-a09cd4388319"),
                            CourseId = new Guid("1a993ed4-841f-4cdd-baac-81f170e66f0d"),
                            HoleNumber = 8,
                            Length = 141,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("ab2bde69-1210-4444-b6f5-aee691e6dc78"),
                            CourseId = new Guid("1a993ed4-841f-4cdd-baac-81f170e66f0d"),
                            HoleNumber = 9,
                            Length = 365,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeeBox")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TeeBoxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1abbd009-9cb4-4578-af1b-9e8422459da1"),
                            CourseId = new Guid("ff1d75b1-b9ec-4f99-b007-f204c42abb1d"),
                            TeeBox = 52
                        },
                        new
                        {
                            Id = new Guid("17f97eb4-d938-47e9-b680-a0d64960212c"),
                            CourseId = new Guid("1a993ed4-841f-4cdd-baac-81f170e66f0d"),
                            TeeBox = 57
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("NoteText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.Property<int>("Puts")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.UserRatings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRating");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseTeeBox", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("TeeBoxes")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany("Notes")
                        .HasForeignKey("HoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.UserRatings", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.User", "User")
                        .WithMany("UserRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.UserRole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");

                    b.Navigation("TeeBoxes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("UserRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
