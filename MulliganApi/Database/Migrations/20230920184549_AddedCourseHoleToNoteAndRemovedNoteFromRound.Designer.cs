// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Data;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    [Migration("20230920184549_AddedCourseHoleToNoteAndRemovedNoteFromRound")]
    partial class AddedCourseHoleToNoteAndRemovedNoteFromRound
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5a4c618-d009-43bb-82fe-3c5dc1d72a0a"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol"
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e07a33f8-7a45-4fd1-add7-356951d69087"),
                            CourseId = new Guid("d5a4c618-d009-43bb-82fe-3c5dc1d72a0a"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("5affd5d2-eed2-4a0f-8838-ffe4d23a36c1"),
                            CourseId = new Guid("d5a4c618-d009-43bb-82fe-3c5dc1d72a0a"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("f0a41fb3-db45-4784-9c4b-702aa536b599"),
                            CourseId = new Guid("d5a4c618-d009-43bb-82fe-3c5dc1d72a0a"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("a4041df2-34f2-4e94-9690-476ee95406a9"),
                            CourseId = new Guid("d5a4c618-d009-43bb-82fe-3c5dc1d72a0a"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("079991cb-a173-4300-8cfe-d7630f4ab95f"),
                            CourseId = new Guid("d5a4c618-d009-43bb-82fe-3c5dc1d72a0a"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("f632db8c-6cdb-4965-bbd8-532e445a9769"),
                            CourseId = new Guid("d5a4c618-d009-43bb-82fe-3c5dc1d72a0a"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("908d0b7b-d68d-4ec6-a7e1-ac463686e9cf"),
                            CourseId = new Guid("d5a4c618-d009-43bb-82fe-3c5dc1d72a0a"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("f7147e26-0c6d-4b36-8742-451d08932046"),
                            CourseId = new Guid("d5a4c618-d009-43bb-82fe-3c5dc1d72a0a"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("eefca9a2-1693-4d36-852b-05ffc78d7a0f"),
                            CourseId = new Guid("d5a4c618-d009-43bb-82fe-3c5dc1d72a0a"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("courseHoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("courseHoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("8c9a491a-2615-4fba-a862-190a5cc95aaf"),
                            CourseId = new Guid("d5a4c618-d009-43bb-82fe-3c5dc1d72a0a"),
                            Strokes = 45,
                            UserId = new Guid("3dd1d758-2124-4a0a-b5b8-0984c5e01def")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f14f71b-c841-4ab4-80ae-61c7f9365895"),
                            HoleNumber = 1,
                            RoundId = new Guid("8c9a491a-2615-4fba-a862-190a5cc95aaf"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("f118b5ec-d876-4ee9-b5a3-94398005b082"),
                            HoleNumber = 2,
                            RoundId = new Guid("8c9a491a-2615-4fba-a862-190a5cc95aaf"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("932ea025-5d64-439e-ae25-5382d21b0faf"),
                            HoleNumber = 3,
                            RoundId = new Guid("8c9a491a-2615-4fba-a862-190a5cc95aaf"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("2a7a6ed2-c50b-4452-9875-b22e60dac3a2"),
                            HoleNumber = 4,
                            RoundId = new Guid("8c9a491a-2615-4fba-a862-190a5cc95aaf"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("b0e4e7c1-7b4a-4e7d-80c0-17469ac9136a"),
                            HoleNumber = 5,
                            RoundId = new Guid("8c9a491a-2615-4fba-a862-190a5cc95aaf"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("f3c594e2-778a-4087-8c6a-a79f07cfef55"),
                            HoleNumber = 6,
                            RoundId = new Guid("8c9a491a-2615-4fba-a862-190a5cc95aaf"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("278a7002-29a1-4e26-ab69-1626e3fa927d"),
                            HoleNumber = 7,
                            RoundId = new Guid("8c9a491a-2615-4fba-a862-190a5cc95aaf"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("4605defc-3128-4f51-a802-b0fb060a4bce"),
                            HoleNumber = 8,
                            RoundId = new Guid("8c9a491a-2615-4fba-a862-190a5cc95aaf"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("7907369a-8836-423f-8af3-857a232dd2e6"),
                            HoleNumber = 9,
                            RoundId = new Guid("8c9a491a-2615-4fba-a862-190a5cc95aaf"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "courseHole")
                        .WithMany()
                        .HasForeignKey("courseHoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("courseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
