// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MulliganApi.Data;

#nullable disable

namespace MulliganApi.Migrations
{
    [DbContext(typeof(MulliganDbContext))]
    partial class MulliganDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea69ae8b-1b42-4839-a715-a931e0ced386"),
                            CourseDescription = "Krokhol golfklubb description",
                            CourseName = "Krokhol"
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb961991-0245-46a4-9c6a-da525ac21f8d"),
                            CourseId = new Guid("ea69ae8b-1b42-4839-a715-a931e0ced386"),
                            HoleNumber = 1,
                            Length = 113,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("f41fb994-81d1-400e-b735-b1bb88d08a8b"),
                            CourseId = new Guid("ea69ae8b-1b42-4839-a715-a931e0ced386"),
                            HoleNumber = 2,
                            Length = 295,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("a7212d21-292f-4826-8a11-536d3b47fb15"),
                            CourseId = new Guid("ea69ae8b-1b42-4839-a715-a931e0ced386"),
                            HoleNumber = 3,
                            Length = 439,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("71d28ec1-e743-40f8-a190-81b343e4fe41"),
                            CourseId = new Guid("ea69ae8b-1b42-4839-a715-a931e0ced386"),
                            HoleNumber = 4,
                            Length = 128,
                            Par = 3
                        },
                        new
                        {
                            Id = new Guid("ac722c6a-e41f-489d-b588-b6baf5e692e0"),
                            CourseId = new Guid("ea69ae8b-1b42-4839-a715-a931e0ced386"),
                            HoleNumber = 5,
                            Length = 506,
                            Par = 5
                        },
                        new
                        {
                            Id = new Guid("2599f69d-9f20-44a9-9fa3-4cd354181077"),
                            CourseId = new Guid("ea69ae8b-1b42-4839-a715-a931e0ced386"),
                            HoleNumber = 6,
                            Length = 227,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("c027e907-0a85-4db2-9bf5-c1068c8304f6"),
                            CourseId = new Guid("ea69ae8b-1b42-4839-a715-a931e0ced386"),
                            HoleNumber = 7,
                            Length = 270,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("70c72cd0-432e-4331-a6a9-fe1e996e6dd3"),
                            CourseId = new Guid("ea69ae8b-1b42-4839-a715-a931e0ced386"),
                            HoleNumber = 8,
                            Length = 298,
                            Par = 4
                        },
                        new
                        {
                            Id = new Guid("9c005b3a-a2e1-42ea-a468-72d066f8dc30"),
                            CourseId = new Guid("ea69ae8b-1b42-4839-a715-a931e0ced386"),
                            HoleNumber = 9,
                            Length = 330,
                            Par = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CourseHoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CourseHoleId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Property<Guid>("RoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Strokes")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoundId");

                    b.ToTable("Round");

                    b.HasData(
                        new
                        {
                            RoundId = new Guid("bfde4973-5db2-48c3-a1c3-20603e4ef747"),
                            CourseId = new Guid("ea69ae8b-1b42-4839-a715-a931e0ced386"),
                            Strokes = 45,
                            UserId = new Guid("ffafa457-d61b-4e44-939d-ab4f7e3c7bc2")
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HoleNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.ToTable("RoundHole");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7418bb15-f284-4777-b384-0639fbc14c54"),
                            HoleNumber = 1,
                            RoundId = new Guid("bfde4973-5db2-48c3-a1c3-20603e4ef747"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("71f7f7c1-e448-4d01-9324-6379e689f867"),
                            HoleNumber = 2,
                            RoundId = new Guid("bfde4973-5db2-48c3-a1c3-20603e4ef747"),
                            Score = 6
                        },
                        new
                        {
                            Id = new Guid("4e14450d-8246-4607-bfe2-ac1a46aa0d94"),
                            HoleNumber = 3,
                            RoundId = new Guid("bfde4973-5db2-48c3-a1c3-20603e4ef747"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("2b289ac6-e06d-4a0e-ab1a-6f64aa666668"),
                            HoleNumber = 4,
                            RoundId = new Guid("bfde4973-5db2-48c3-a1c3-20603e4ef747"),
                            Score = 3
                        },
                        new
                        {
                            Id = new Guid("c1c3f1b2-9f17-44b7-b2cc-4dae1cf02a5e"),
                            HoleNumber = 5,
                            RoundId = new Guid("bfde4973-5db2-48c3-a1c3-20603e4ef747"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("3c18512a-469e-438e-8978-ec68d8c6cc85"),
                            HoleNumber = 6,
                            RoundId = new Guid("bfde4973-5db2-48c3-a1c3-20603e4ef747"),
                            Score = 4
                        },
                        new
                        {
                            Id = new Guid("8ad27faa-ded1-49ac-ae89-63fed88e12b2"),
                            HoleNumber = 7,
                            RoundId = new Guid("bfde4973-5db2-48c3-a1c3-20603e4ef747"),
                            Score = 5
                        },
                        new
                        {
                            Id = new Guid("64017a44-fbb7-47eb-b1ce-5b1d83adbd0d"),
                            HoleNumber = 8,
                            RoundId = new Guid("bfde4973-5db2-48c3-a1c3-20603e4ef747"),
                            Score = 2
                        },
                        new
                        {
                            Id = new Guid("78575424-9d7d-4112-8e83-3b2d1c361bcf"),
                            HoleNumber = 9,
                            RoundId = new Guid("bfde4973-5db2-48c3-a1c3-20603e4ef747"),
                            Score = 4
                        });
                });

            modelBuilder.Entity("MulliganApi.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.CourseHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Course", null)
                        .WithMany("CourseHoles")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Note", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.CourseHole", "CourseHole")
                        .WithMany()
                        .HasForeignKey("CourseHoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseHole");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.RoundHole", b =>
                {
                    b.HasOne("MulliganApi.Database.Models.Round", null)
                        .WithMany("Holes")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Course", b =>
                {
                    b.Navigation("CourseHoles");
                });

            modelBuilder.Entity("MulliganApi.Database.Models.Round", b =>
                {
                    b.Navigation("Holes");
                });
#pragma warning restore 612, 618
        }
    }
}
